Learning env link:

https://rol.redhat.com/rol/rhz/login

user: ohadma
pass: system default


lecturer name: dariush
email: dariusz.puchalak@osec.pl


ansible / ansible tower automation


open console -> student user
password: student


a standard ansible environment consists of 2 basic files:
1. an inventory file
2. a configuration file


inventory: a list of machines to manage, can be created automatically using a script

	-> a text file called 'hosts' (can be JSON also)
	-> structure: 
		[group-name-of-servers-to-mange]
		fqdn.of.server.1
		fqdn.of.server.2
		1.2.3.4
	-> there is an auto group called 'all' which mean all the hosts
	-> there is an auto group called 'ungrouped' which mean all the hosts without a group
	-> nested groups are supported and unlimited in recursion level.
		-> e.g.
			[my-nested-group:children]
			jerusalem
			tel-aviv
			[jerusalem]
			server1
			[tel-aviv]
			server2
		
		-> the semi colon means "a groups only" group.
	-> range pattern is also supported:
		-> e.g. server[1:8].com (server1,server2 .. server 8)
			192.168.1.[1:25]

	-> dynamic inventory:
		-> can be created by specifing a binary file (a file with the 'executable' bit on) as an inventory

ansible config file:

	-> ansible.cfg
	-> precedence (3 levels): 1. local file in current directory, 2. same in the user's home folder 3. /etc/ansible/ansible.cfg
	-> ansible --version returns the working location of ansible.cfg







modules: 

	-> docs.ansible.com

		-> module index


* steps are ran horizonally by default, not vertically (e.g step 1 will run for all hosts and then step 2 for all and so on ...)

* ssh/winrm/vmware api based
	-> ssh: change sshd_config file when needed (e.g. for adding more parallel sessions etc.)

* push based

* uses python v2 in Linux

* uses powershell in Windows

* uses vSphere API in Vmware





ctrl+shift+"+" - increase the size of the font in the terminal



basic syntax:

ansible <host/group> <command>

ansible <host/group> -i <inventory-file> <command>

ansible server*.com --list-hosts


ad-hoc commands:

	-> ansible all -a "ifconfig"






ansible all -m command id - command depends on the shell we get
ansible all -m raw get-content c:\ - raw simply sends the command as is

ansible all -m setup - get host info
ansible all -m setup -a 'filter=*eth0*'
ansible all -m setup -a 'filter=*ansible_user*'

ansible all copy src=/path/to/source/file dest=/path/to/dest/file

ansible localhost -m debug -a 'var=hostvars["localhost"]'


ansible-doc <module-name> - get info on how to use a module


Playbooks:

	-> yaml based text files
		-> a yaml file MUST start with three minuses at its top: ---
		-> after the line of minuses, comes the actual content of the playbook.
			-> a basic structure looks like this:
				
				
		-> a description starts with a " - name:" statement.
		-> if the name part is ommited, a minus MUST be present before calling a module. e.g.: "- debug:"

	-> define the workflow to task to perform by calling modules/variables/commands
	-> checking / running:
			-> ansible-playbook --syntax-check internet.yml
			-> ansible-playbook internet.yml
			-> ansible-playbook install.yml -e "variableToOverride=newValue"


Variables:

	-> available chars: letters,digits,underscores
	-> must NOT start with a digit

	-> vars keyword:
		-> vars:
			myVar: myValue

	-> double curly brackets to use in between quotes
		-> "{{ myVar }}"

	-> can be also setup in an inventory file:
		-> [myGroup:vars]
			myVar=myValue


			
Facts:

	-> variables taken from the MANAGED hosts
	-> this is a good way to get inventory list by subjects such as OS version, arch etc.	
		
	

Inclusions:
	
	-> include_vars: vars/variables.yml
		-> can be used in a loop with a variable to load a list of variables based on arch/os version etc.
		-> can be used to create generic scripts - the BL script will run tasks using variables and a wrapper script will call the BL script using
		specific values after including it.


Handlers:

	-> allow running a function when an event is fired
		-> the call defines athe order of execution, NOT the 'notify' definition
 
Loops:

	-> with_items
	-> with_first_found



Roles:

	-> a file-system-structure-based code
	-> the type of components are actully directories with the respective component names
		-> vars
		-> tasks
		-> defaults
		-> meta
		-> tests
		-> handlers
		-> etc.
	-> main.yml is the default script name to process from each dir
	-> roles are ran from a playbook using the "roles:" module
	-> "ansible galaxy" - a repo for ansible roles


ansible-vault:
	
	-> a binary used to encrypt ansible files
		-> usage: ansible-vault encrypt <ansible-file>
		-> example: ansible-vault encrypt myPlaybook.yml
			-> you will be asked for a password to encrypt the file with

	-> to edit an encrypted file use: ansible-vault edit <ansible-file>

	-> to run an encrypted playbook use: ansible-playbook myPlaybook.yml --ask-vault-pass
		-> supply the password you've created when the file was encrypted


Troubleshooting:

	-> env var: $ANSIBLE_LOG_PATH - setup a path for Ansible's log file
	-> yaml: - debug:
		var: output
		verbosity: 2 (1=basic, 2=informative)
	-> client: -v -vv -vvv -vvvv (4 levels: 1-output, 2=input and output)


Extra stuff
==================

-> changed_when: yes - tell ansible you know there will be no change after running the command

-> run_once: true - run only on one managed host

-> delegate_to: localhost - run the playbook on an additional host

-> ignore_errors: true - don't stop after encountering an error

-> become: true - run as root/admin

-> a-sync run
	-> async: 60 - run in the background for 60 seconds
	-> poll: 10 - check status every 10 seconds

	-> async_status - check the docs
	
-> rebooting machines
	-> always add a terminal "sleep" command before running a reboot command via ansible


-> gather_facts: no - tell ansible not to gather facts before running the playbook

-> ansible localhost -m debug -a 'var=hostvars["localhost"]' - shows some ansible useful info about a host

-> no_log: true - tell ansible not to see output for the current play

-> read and understand the best practices manual


Jinja2
=========================

-> a template language
-> related to Python in general and not specific to Ansible
-> can be used to create general template files and use variables to create a specific config file.
	-> useful for creating 'if-ethX' files for a Linux NICs for example.  

-> jinja2 code starts and ends with statements between curly brackets and the percent signs - "{%  %}".
-> template files end with ".j2" extension.
-> jinja2 can filter, flatten and loop through lists easily.
-> jinja2 can filter and validate expressions.
-> jinja2 has several built-in functions such as join(), basename (win_basename for windows), urlsplit(), random(),math functions, etc.
-> jinja2 can test expressions agains a given formats e.g make sure an ip address is valid.

 



